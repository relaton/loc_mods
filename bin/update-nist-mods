#!/usr/bin/env ruby
# frozen_string_literal: true

# This script splits the NIST allrecords-MODS.xml file into individual files to
# test round-tripping.
# Described at https://github.com/usnistgov/NIST-Tech-Pubs/issues/42
#
# The latest NIST allrecords-MODS.xml is available at:
# https://github.com/usnistgov/NIST-Tech-Pubs/releases/download/May2024/allrecords-MODS.xml

require "nokogiri"
require "open-uri"

NIST_MODS_URL = "https://github.com/usnistgov/NIST-Tech-Pubs/releases/latest/download/allrecords-MODS.xml"

dirname = Pathname.new(__dir__).join("../spec/fixtures")
allrecords_path = Pathname.new(__dir__).join("../references/allrecords-MODS.xml")

puts "Downloading latest NIST MODS file from #{NIST_MODS_URL}"
URI.open(NIST_MODS_URL) do |u|
  File.open(allrecords_path, "wb") { |f| f.write(u.read) }
  puts "Saved at #{allrecords_path.relative_path_from(__dir__)}."
end

puts "Parsing #{allrecords_path.relative_path_from(__dir__)}..."
document = Nokogiri::XML(
  File.read(allrecords_path)
    .gsub(' xmlns:xlink="http://www.w3.org/1999/xlink" ', " ")
)

ns = {
  "xmlns" => "http://www.loc.gov/mods/v3",
  "xmlns:xsi" => "http://www.w3.org/2001/XMLSchema-instance"
}

# TODO: We delete `xmlns:xlink="http://www.w3.org/1999/xlink"` in the collection
# and return it here, because it is meant to be put at the root instead of
# the children.
document.xpath("//xmlns:mods", ns).each do |record|
  new_doc = Nokogiri::XML(<<~EOF
    <modsCollection xmlns="http://www.loc.gov/mods/v3"
                  xmlns:xlink="http://www.w3.org/1999/xlink"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://www.loc.gov/mods/v3 http://www.loc.gov/standards/mods/v3/mods-3-7.xsd">
    </modsCollection>
  EOF
                         )

  new_doc.root.add_child(record)

  new_xml = new_doc.to_xml(
    pretty: true,
    declaration: true,
    encoding: "utf-8"
  )

  # "<identifier>" can be multiple or it may not exist.
  id = record.xpath("xmlns:recordInfo/xmlns:recordIdentifier[1]").text

  if id.nil? || id.empty?
    puts record
    raise StandardError, "[ERROR] No recordIdentifier found for above record"
  end

  filename = dirname.join("allrecords-MODS-#{id}.xml")
  puts "Splitting record (#{id}): #{filename.relative_path_from(__dir__)}"

  File.open(filename, "w") { |f| f.write(new_xml) }
end
